name: Component Updates
on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:

jobs:
  component-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests

      - name: Run rTorrent update
        run: python3 Scripts/rtorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_DIR: ${{ github.workspace }}

      - name: Run ruTorrent update
        run: python3 Scripts/rutorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_DIR: ${{ github.workspace }}

      - name: Check for Dockerfile changes
        id: check-changes
        run: |
          echo "=== Raw Dockerfile Differences ==="
          git diff Dockerfile || true
          
          if ! git diff --quiet Dockerfile; then
            echo "‚úÖ Genuine Dockerfile changes detected"
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "üõë No substantial changes in Dockerfile"
            echo "::warning::Skipping PR creation - no meaningful changes"
          fi

      - name: Create update branch
        if: env.changes == 'true'
        run: |
          git add Dockerfile
          echo "=== Staged Changes ==="
          git diff --cached Dockerfile || true
          
          if [[ -z $(git diff --cached Dockerfile) ]]; then
            echo "üõë No changes staged! Debug info:"
            git diff Dockerfile || true
            git status
            exit 1
          fi
          
          branch_name="update-$(date +'%Y%m%d%H%M%S')"
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git checkout -b $branch_name
          git commit -m "Update component versions"
          git push origin $branch_name
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV

      - name: Create and merge PR
        if: env.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euxo pipefail
          git fetch origin main ${{ env.BRANCH_NAME }}
          git diff origin/main..origin/${{ env.BRANCH_NAME }} -- Dockerfile || true
          
          if git diff --quiet origin/main..origin/${{ env.BRANCH_NAME }} -- Dockerfile; then
            echo "üõë Critical: No Dockerfile differences despite earlier detection"
            exit 1
          fi

          pr_data=$(jq -n \
            --arg title "Component Update ($(date +'%Y-%m-%d'))" \
            --arg body "Automatic version bump" \
            --arg head "${{ env.BRANCH_NAME }}" \
            '{title: $title, body: $body, head: $head, base: "main"}')

          pr_response=$(curl -s -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$pr_data" \
            "https://api.github.com/repos/$REPO/pulls")

          pr_url=$(echo "$pr_response" | jq -r '.html_url')
          echo "PR Created: $pr_url"

          pr_number=$(echo "$pr_response" | jq -r '.number')
          curl -s -X PUT \
            -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$pr_number/merge"

          echo "‚úÖ PR Merged Successfully"

      - name: Generate release tag and create release
        if: env.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN:   ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail

          # Fetch tags and configure git identity
          git fetch --tags --force
          git config --global user.email ${{ secrets.EMAIL }}
          git config --global user.name  ${{ secrets.NAME }}

          # Get latest upstream versions
          rt_repo="stickz/rtorrent"
          rt_tag_name=$(curl -sLH "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$rt_repo/releases/latest" \
            | jq -r '.tag_name | sub("^v";"")')
          ru_repo="Novik/ruTorrent"
          ru_tag_name=$(curl -sLH "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$ru_repo/releases/latest" \
            | jq -r '.tag_name | sub("^v";"")')

          # Simplify to major.minor
          rt_version=$(echo "$rt_tag_name" | grep -Eo '[0-9]+\.[0-9]+' | head -1)
          ru_version=$(echo "$ru_tag_name" | grep -Eo '[0-9]+\.[0-9]+')

          # Gather all existing tags
          existing_tags=$(git tag)

          # Track if plain base exists and highest hotfix index
          base_exists=0
          max_hotfix=0
          while IFS= read -r tag; do
            if [[ "$tag" =~ ^${ru_version}_([0-9]+)-${rt_version}-r[0-9]+$ ]]; then
              idx=${BASH_REMATCH[1]}
              (( idx > max_hotfix )) && max_hotfix=$idx
            elif [[ "$tag" =~ ^${ru_version}-${rt_version}-r[0-9]+$ ]]; then
              base_exists=1
            fi
          done <<< "$existing_tags"

          # Decide if we need a hotfix suffix
          if (( base_exists == 1 )) || (( max_hotfix > 0 )); then
            hotfix=$((max_hotfix + 1))
            ru_version="${ru_version}_${hotfix}"
          fi

          # Now find highest -rN for this (possibly suffixed) version
          max_r=0
          while IFS= read -r tag; do
            if [[ "$tag" =~ ^${ru_version}-${rt_version}-r([0-9]+)$ ]]; then
              r=${BASH_REMATCH[1]}
              (( r > max_r )) && max_r=$r
            fi
          done <<< "$existing_tags"

          new_r=$((max_r + 1))
          new_tag="${ru_version}-${rt_version}-r${new_r}"

          # Sanitize and check uniqueness
          clean_tag=$(echo "$new_tag" | tr -cd '[:alnum:]_.-' | sed 's/[-_]$//')
          if git rev-parse "$clean_tag" >/dev/null 2>&1 || \
             gh api repos/${{ github.repository }}/git/ref/tags/$clean_tag >/dev/null 2>&1; then
            echo "‚ùå Tag $clean_tag already exists unexpectedly"
            exit 1
          fi

          # Create tag, push, and publish release
          git tag "$clean_tag"
          git push origin "refs/tags/$clean_tag"
          gh release create "$clean_tag" \
            --title  "Release $clean_tag" \
            --notes  "Component versions:
            - rTorrent: $rt_tag_name
            - ruTorrent: $ru_tag_name"

          echo "‚úÖ Created release: $clean_tag"
