name: Component Updates
on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:

jobs:
  component-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests

      - name: Run rTorrent update
        run: python3 Scripts/rtorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_DIR: ${{ github.workspace }}

      - name: Run ruTorrent update
        run: python3 Scripts/rutorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_DIR: ${{ github.workspace }}

      - name: Check for Dockerfile changes
        id: check-changes
        run: |
          git diff --quiet Dockerfile || echo "changes=true" >> $GITHUB_ENV

      - name: Create update branch
        if: env.changes == 'true'
        run: |
          branch_name="update-$(date +'%Y%m%d%H%M%S')"
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git checkout -b $branch_name
          git add Dockerfile
          git commit -m "Update component versions"
          git push origin $branch_name
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV

      - name: Create and merge PR
        if: env.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_response=$(curl -X POST -H "Authorization: token $GH_TOKEN" \
            -d '{"title":"Automatically generated changes on ${{ env.BRANCH_NAME }}","body":"Automatic update of components from upstream","head":"${{ env.BRANCH_NAME }}","base":"main"}' \
            "https://api.github.com/repos/${{ github.repository }}/pulls")

          pr_number=$(echo $pr_response | jq '.number')

          # Set PR to squash merge
          curl -X PATCH -H "Authorization: token $GH_TOKEN" \
            -d '{"merge_method":"squash"}' \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number"

          # Merge PR
          curl -X PUT -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number/merge"

          echo "PR merged successfully"




      - name: Create and merge PR
        if: env.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
          REPO: ${{ github.repository }}
        run: |
          # Safely generate JSON payload using jq
          pr_data=$(jq -n \
            --arg title "Automatically generated changes on $BRANCH_NAME" \
            --arg body "Automatic update of components from upstream" \
            --arg head "$BRANCH_NAME" \
            '{title: $title, body: $body, head: $head, base: "main"}')

          # Create PR
          pr_response=$(curl -s -X POST -H "Authorization: token $GH_TOKEN" \
            -d "$pr_data" \
            "https://api.github.com/repos/$REPO/pulls")

          # Check for errors
          pr_error=$(echo "$pr_response" | jq -r '.message')
          if [[ "$pr_error" != "null" ]]; then
            echo "PR creation failed: $pr_error"
            exit 1
          fi

          pr_number=$(echo "$pr_response" | jq -r '.number')
          if [[ -z "$pr_number" ]]; then
            echo "Failed to extract PR number"
            exit 1
          fi

          # Enable squash merge
          curl -X PATCH -H "Authorization: token $GH_TOKEN" \
            -d '{"merge_method":"squash"}' \
            "https://api.github.com/repos/$REPO/pulls/$pr_number"

          # Merge PR
          merge_response=$(curl -s -X PUT -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$pr_number/merge")

          # Verify merge success
          merged=$(echo "$merge_response" | jq -r '.merged')
          if [[ "$merged" != "true" ]]; then
            echo "Merge failed: $merge_response"
            exit 1
          fi

          echo "PR merged successfully"
