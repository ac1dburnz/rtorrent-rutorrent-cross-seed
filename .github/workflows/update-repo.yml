name: Component Updates

on:
  schedule:
    - cron: '0 0 * * *' # Daily at midnight UTC
  workflow_dispatch:

jobs:
  component-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests

      - name: Run rTorrent update
        run: python3 Scripts/rtorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_DIR: ${{ github.workspace }}

      - name: Run ruTorrent update
        run: python3 Scripts/rutorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_DIR: ${{ github.workspace }}

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --exit-code Dockerfile; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create update branch
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          branch_name="update-$(date +'%Y%m%d%H%M%S')"
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git checkout -b $branch_name
          git add Dockerfile
          git commit -m "Update component versions"
          git push origin $branch_name

      - name: Create and merge PR
        if: steps.check-changes.outputs.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --title "Component version updates (${{ env.BRANCH_NAME }})" \
                       --body "Automatic updates from upstream repositories" \
                       --base main \
                       --head ${{ env.BRANCH_NAME }}
          gh pr merge --admin --merge ${{ env.BRANCH_NAME }}

      - name: Create release
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          # Extract versions properly
          rt_version=$(grep 'ARG RTORRENT_STICKZ_VERSION=' Dockerfile | cut -d'=' -f2 | tr -d '"')
          ru_version=$(grep '# Novik/ruTorrent' Dockerfile | awk '{print $3}' | tr -d '"')

          suffix=""
          release_num=0

          generate_tag() {
            echo "${ru_version}${suffix}-${rt_version}-r${release_num}"
          }

          # Find available tag
          while git fetch --tags && git tag | grep -q "^$(generate_tag)$"; do
            if [ -z "$suffix" ]; then
              suffix="_1"
            else
              suffix_num=$(echo "$suffix" | cut -d'_' -f2)
              suffix_num=$((suffix_num + 1))
              suffix="_${suffix_num}"
            fi
          done

          tag_name=$(generate_tag)

          echo "Creating and pushing tag: $tag_name"
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

          git tag "$tag_name"
          git push origin "$tag_name"

          echo "Creating GitHub release: $tag_name"
          gh release create "$tag_name" --title "$tag_name" --notes "Automatic component update release."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
