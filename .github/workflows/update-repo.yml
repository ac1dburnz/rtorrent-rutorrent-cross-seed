name: Component Updates
on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:

jobs:
  component-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests

      - name: Run rTorrent update
        run: python3 Scripts/rtorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_DIR: ${{ github.workspace }}

      - name: Run ruTorrent update
        run: python3 Scripts/rutorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_DIR: ${{ github.workspace }}

      - name: Check for Dockerfile changes
        id: check-changes
        run: |
          echo "=== Raw Dockerfile Differences ==="
          git diff Dockerfile || true
          
          if ! git diff --quiet Dockerfile; then
            echo "‚úÖ Genuine Dockerfile changes detected"
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "üõë No substantial changes in Dockerfile"
            echo "::warning::Skipping PR creation - no meaningful changes"
          fi

      - name: Create update branch
        if: env.changes == 'true'
        run: |
          # Explicitly stage Dockerfile changes
          git add Dockerfile
          
          # Debug staging status
          echo "=== Staged Changes ==="
          git diff --cached Dockerfile || true
          
          # Verify staging
          if [[ -z $(git diff --cached Dockerfile) ]]; then
            echo "üõë No changes staged! Debug info:"
            echo "=== Working Directory Changes ==="
            git diff Dockerfile || true
            echo "=== Git Status ==="
            git status
            exit 1
          fi
      
          branch_name="update-$(date +'%Y%m%d%H%M%S')"
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git checkout -b $branch_name
          git commit -m "Update component versions"
          
          echo "=== Commit Details ==="
          git show --stat
          
          git push origin $branch_name
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV

      - name: Create and merge PR
        if: env.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euxo pipefail

          # Verify file differences between branches
          git fetch origin main ${{ env.BRANCH_NAME }}
          
          echo "=== Commit Comparison ==="
          git log --pretty=oneline -1 origin/main
          git log --pretty=oneline -1 origin/${{ env.BRANCH_NAME }}

          echo "=== Dockerfile Diff Between Branches ==="
          git diff origin/main..origin/${{ env.BRANCH_NAME }} -- Dockerfile || true

          if git diff --quiet origin/main..origin/${{ env.BRANCH_NAME }} -- Dockerfile; then
            echo "üõë Critical: No Dockerfile differences despite earlier detection"
            exit 1
          fi

          # Create PR
          pr_data=$(jq -n \
            --arg title "Component Update ($(date +'%Y-%m-%d'))" \
            --arg body "Automatic version bump" \
            --arg head "${{ env.BRANCH_NAME }}" \
            '{title: $title, body: $body, head: $head, base: "main"}')

          pr_response=$(curl -s -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$pr_data" \
            "https://api.github.com/repos/$REPO/pulls")

          pr_url=$(echo "$pr_response" | jq -r '.html_url')
          echo "PR Created: $pr_url"

          # Immediate merge
          pr_number=$(echo "$pr_response" | jq -r '.number')
          curl -s -X PUT \
            -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$pr_number/merge"

          echo "‚úÖ PR Merged Successfully"

      - name: Generate release tag and create release
        if: env.changes == 'true'
        run: |
          set -euxo pipefail
      
          # Fetch tags and configure git
          git fetch --tags --force
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
      
          # Get component versions
          rt_repo="stickz/rtorrent"
          rt_tag_name=$(curl -sLH "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$rt_repo/releases/latest" | jq -r '.tag_name | sub("^v";"")')
          
          ru_repo="Novik/ruTorrent"
          ru_tag_name=$(curl -sLH "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$ru_repo/releases/latest" | jq -r '.tag_name | sub("^v";"")')
      
          # Extract clean versions
          rt_version=$(echo "$rt_tag_name" | grep -Eo '^[0-9]+\.[0-9]+' | head -1)
          ru_version=$(echo "$ru_tag_name" | grep -Eo '^[0-9]+\.[0-9]+')
      
          # Get release counter
          last_r_number=$(git tag | grep -Eo '-r[0-9]+$' | sort -V | tail -1 | tr -d '-r' || echo 0)
          new_r_number=$((last_r_number + 1))
      
          # Generate unique tag with correct format
          increment=0
          while true; do
            if [ $increment -eq 0 ]; then
              # Initial format: 5.2_7.2-r0
              tag_name="${ru_version}_${rt_version}-r${new_r_number}"
            else
              # Retry format: 5.2_1-7.2-r0
              tag_name="${ru_version}_${increment}-${rt_version}-r${new_r_number}"
            fi
      
            # Clean and validate
            clean_tag=$(echo "$tag_name" | tr -cd '[:alnum:]_-' | sed 's/_+/_/g')
            
            # Check existence
            if ! git rev-parse "$clean_tag" >/dev/null 2>&1 && \
               ! gh api repos/$GITHUB_REPOSITORY/git/ref/tags/$clean_tag >/dev/null 2>&1; then
              break
            fi
      
            echo "Tag $clean_tag exists, incrementing..."
            ((increment++))
            [ $increment -gt 5 ] && { echo "‚ùå Max attempts reached"; exit 1; }
          done
      
          # Create and push tag
          git tag "$clean_tag"
          git push origin "$clean_tag"
      
          # Create release
          gh release create "$clean_tag" \
            --title "Release $clean_tag" \
            --notes "Component versions:
            - rTorrent: $rt_tag_name
            - ruTorrent: $ru_tag_name"
      
          echo "‚úÖ Created release: $clean_tag"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
