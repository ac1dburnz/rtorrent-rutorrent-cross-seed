name: Component Updates
on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:

jobs:
  component-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests

      - name: Run rTorrent update
        run: python3 Scripts/rtorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_DIR: ${{ github.workspace }}

      - name: Run ruTorrent update
        run: python3 Scripts/rutorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_DIR: ${{ github.workspace }}

      - name: Check for Dockerfile changes
        id: check-changes
        run: |
          git diff --quiet Dockerfile || echo "changes=true" >> $GITHUB_ENV

      - name: Create update branch
        if: env.changes == 'true'
        run: |
          branch_name="update-$(date +'%Y%m%d%H%M%S')"
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git checkout -b $branch_name
          git add Dockerfile
          git commit -m "Update component versions"
          git push origin $branch_name
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV


      
      - name: Create and merge PR
        if: env.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euxo pipefail

          # Verify FILE differences between branches
          if git diff --quiet origin/main..origin/${{ env.BRANCH_NAME }} -- Dockerfile ; then
            echo "ðŸ›‘ No Dockerfile changes between main and ${{ env.BRANCH_NAME }}"
            exit 0  # Graceful exit
          fi

          # Rest of your existing PR creation code
          pr_data='{"title":"Automatically generated changes on '"${{ env.BRANCH_NAME }}"'...'
          # ...
      
          # Verify branch exists
          echo "Using branch: ${{ env.BRANCH_NAME }}"
      
          # Use manual JSON formatting (your working approach)
          pr_data='{"title":"Automatically generated changes on '"${{ env.BRANCH_NAME }}"'","body":"Automatic update of components from upstream","head":"'"${{ env.BRANCH_NAME }}"'","base":"main"}'
          echo "Payload: $pr_data"
      
          # Create PR
          pr_response=$(curl -s -X POST -H "Authorization: token $GH_TOKEN" \
            -d "$pr_data" \
            "https://api.github.com/repos/$REPO/pulls")
      
          # Error handling
          pr_error=$(echo "$pr_response" | jq -r '.message')
          if [[ "$pr_error" != "null" ]]; then
            echo "PR creation failed: $pr_error"
            exit 1
          fi
      
          pr_number=$(echo "$pr_response" | jq -r '.number')
          echo "PR Number: $pr_number"
      
          # Merge PR
          merge_response=$(curl -s -X PUT -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$pr_number/merge")
      
          merged=$(echo "$merge_response" | jq -r '.merged')
          [[ "$merged" == "true" ]] || { echo "Merge failed"; exit 1; }
          echo "PR merged successfully"

      - name: Create and merge PR
        if: env.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euxo pipefail  # Exit on error
      
          # Verify branch actually differs from main
          git fetch origin main
          MAIN_SHA=$(git rev-parse origin/main)
          BRANCH_SHA=$(git rev-parse origin/${{ env.BRANCH_NAME }})
      
          if [[ "$MAIN_SHA" == "$BRANCH_SHA" ]]; then
            echo "ðŸ›‘ Branch ${{ env.BRANCH_NAME }} identical to main - aborting PR creation"
            exit 0  # Graceful exit since no changes exist
          fi
      
          # Create PR (your existing code)
          pr_data='{"title":"Automatically generated changes on '"${{ env.BRANCH_NAME }}"'","body":"Automatic update of components from upstream","head":"'"${{ env.BRANCH_NAME }}"'","base":"main"}'
          pr_response=$(curl -s -X POST -H "Authorization: token $GH_TOKEN" \
            -d "$pr_data" \
            "https://api.github.com/repos/$REPO/pulls")
      
          # Existing error handling
          pr_error=$(echo "$pr_response" | jq -r '.message')
          if [[ "$pr_error" != "null" ]]; then
            echo "PR creation failed: $pr_error"
            exit 1
          fi
      
          # Existing merge code
          pr_number=$(echo "$pr_response" | jq -r '.number')
          merge_response=$(curl -s -X PUT -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$pr_number/merge")
      
          merged=$(echo "$merge_response" | jq -r '.merged')
          [[ "$merged" == "true" ]] || { echo "Merge failed"; exit 1; }
          echo "PR merged successfully"
