name: Component Updates
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write         # needed to push tags
  pull-requests: write    # for creating & merging PRs
  actions: write          # allow triggering other workflows
  id-token: write         # if you ever need OIDC
  issues: write           # if you add comments

jobs:
  component-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.TOKEN_SECRET }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install requests

      - name: Run rTorrent update
        run: python3 Scripts/rtorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_SECRET }}
          BASE_DIR: ${{ github.workspace }}

      - name: Run ruTorrent update
        run: python3 Scripts/rutorrent-auto-update.py
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_SECRET }}
          BASE_DIR: ${{ github.workspace }}

      - name: Check for Dockerfile changes
        id: check-changes
        run: |
          git diff Dockerfile || true
          if ! git diff --quiet Dockerfile; then
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "::warning::No Dockerfile changes"
          fi

      - name: Create update branch
        if: env.changes == 'true'
        run: |
          git add Dockerfile
          branch_name="update-$(date +'%Y%m%d%H%M%S')"
          git config user.email "github-actions@users.noreply.github.com"
          git config user.name  "GitHub Actions"
          git checkout -b $branch_name
          git commit -m "Update component versions"
          git push https://x-access-token:${{ secrets.TOKEN_SECRET }}@github.com/${{ github.repository }} $branch_name
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV

      - name: Create and merge PR
        if: env.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.TOKEN_SECRET }}
          REPO:    ${{ github.repository }}
        run: |
          set -euxo pipefail
          pr_data=$(jq -n \
            --arg title "Component Update ($(date +'%Y-%m-%d'))" \
            --arg body  "Automatic version bump" \
            --arg head  "${{ env.BRANCH_NAME }}" \
            '{title: $title, body: $body, head: $head, base: "main"}')
          pr_response=$(curl -s -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$pr_data" \
            "https://api.github.com/repos/$REPO/pulls")
          pr_number=$(echo "$pr_response" | jq -r '.number')
          curl -s -X PUT \
            -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$pr_number/merge"

      - name: Generate release tag and create release
        if: env.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_SECRET }}
        run: |
          set -euxo pipefail

          git fetch --tags --force
          git config user.email "${{ secrets.EMAIL }}"
          git config user.name  "${{ secrets.NAME }}"

          rt_tag=$(curl -sLH "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/stickz/rtorrent/releases/latest \
            | jq -r '.tag_name|sub("^v";"")')
          ru_tag=$(curl -sLH "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/Novik/ruTorrent/releases/latest \
            | jq -r '.tag_name|sub("^v";"")')

          rt_version=$(echo "$rt_tag" | grep -Eo '[0-9]+\.[0-9]+' | head -1)
          ru_version=$(echo "$ru_tag" | grep -Eo '[0-9]+\.[0-9]+')

          tags=$(git tag)

          base_exists=0; max_hotfix=0
          while read -r t; do
            if [[ $t =~ ^${ru_version}_([0-9]+)-${rt_version}-r[0-9]+$ ]]; then
              idx=${BASH_REMATCH[1]}
              (( idx>max_hotfix )) && max_hotfix=$idx
            elif [[ $t =~ ^${ru_version}-${rt_version}-r[0-9]+$ ]]; then
              base_exists=1
            fi
          done <<<"$tags"

          if (( base_exists || max_hotfix>0 )); then
            hotfix=$((max_hotfix+1))
            ru_version="${ru_version}_${hotfix}"
          fi

          max_r=0
          while read -r t; do
            if [[ $t =~ ^${ru_version}-${rt_version}-r([0-9]+)$ ]]; then
              r=${BASH_REMATCH[1]}; (( r>max_r )) && max_r=$r
            fi
          done <<<"$tags"

          new_r=$((max_r+1))
          new_tag="${ru_version}-${rt_version}-r${new_r}"

          git tag "$new_tag"
          git push https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }} refs/tags/$new_tag

          # Create release via API so GitHub sees the new tag immediately
          curl -sSL -X POST "https://api.github.com/repos/${{ github.repository }}/releases" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$(jq -nc --arg tag "$new_tag" --arg name "$new_tag" --arg body "rTorrent: $rt_tag\nruTorrent: $ru_tag" \
                '{ tag_name:$tag, name:$name, body:$body, draft:false, prerelease:false }')"

          echo "âœ… Created release $new_tag"
